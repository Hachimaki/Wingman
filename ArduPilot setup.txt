Setting up ArduPilot, Mission Planner, MAVProxy, SITL

- Clone ardupilot: git clone https://github.com/ArduPilot/ardupilot.git
- Ensure g++-4.9, cmake, and gcc-arm-eabi-none (gcc-arm-embedded) are installed
- Install prerequisites (Linux): ./ardupilot/Tools/scripts/install-prereqs-ubuntu.sh
- Go into ArduPilot and run waf for the given board: cd ardupilot, ./waf configure --board sitl
- Compile for the target vehicle: ./waf copter

Running the copter
- cd ./ardupilot/build/sitl/bin
- ./arducopter --model QUAD --home 30.445969,-84.299795,32,0 (this is the parking lot behind Love)
- You are now running in SitL

Connecting to MAVProxy
- Connect a Mission Planner instance over TCP to 127.0.0.1:5762
- mavproxy.py --master=tcp:127.0.0.1:5762 --map --console
- Disconnect the Mission Planner
- mode GUIDED
- output add 127.0.0.1:14550
- Connect the Mission Planner to UDP 14550

From here, you're connected and can send commands from either Mission Planner (through MAVPRoxy) or MAVProxy

Running multiple instances of ArduCopter in SITL
- ./arducopter --model QUAD --home 30.445969,-84.299795,32,0 -I 0 - MAVLINK port 5762
- ./arducopter --model QUAD --home 30.445970,-84.299790,32,0 -I 1 - MAVLINK port 5772

Note: running in instances increases ports on each drone by 10 * I

Running Flight Gear
- Install Flight Gear
- Run it once, changing it to download terrain automatically (in settings)
- move the fg_quad_view_COPTest.bat file to /autotest
- Run the bat file
You can now follow your drone via Flight Gear